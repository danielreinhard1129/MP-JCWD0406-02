// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  fullName        String
  password        String
  email           String         @unique
  profile_picture String?
  contact         Int?
  address         String?
  referral_number String         @unique
  updateAt        DateTime       @default(now())
  createdAt       DateTime       @updatedAt
  roleId          Int
  role            Role           @relation(fields: [roleId], references: [id])
  point_balance   PointBalance[]
  userReward      UserReward[]
  userVoucher     UserVoucher[]
  event           Event[]
}

model Role {
  id   Int    @id @default(autoincrement())
  role String
  user User[]
}

model PointBalance {
  id            Int      @id @default(autoincrement())
  point_balance Int      @default(0)
  userId        Int
  expiresAt     DateTime
  createAt      DateTime @default(now())
  updateAt      DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model UserReward {
  id        Int      @id @default(autoincrement())
  userId    Int
  rewardId  Int
  expiresAt DateTime
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward    Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
}

model Reward {
  id         Int          @id @default(autoincrement())
  nameReward String
  persentase Int
  createAt   DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  userReward UserReward[]
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUse     Boolean  @default(false)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucher   Voucher  @relation(fields: [voucherId], references: [id], onDelete: Cascade)
}

model Voucher {
  id          Int           @id @default(autoincrement())
  nameVoucher String
  persentase  Int
  expiresAt   DateTime
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  userVoucher UserVoucher[]
}

model Event {
  id             Int             @id @default(autoincrement())
  event_name     String
  price          Int
  dateTime       DateTime
  createdAt      DateTime        @default(now())
  updateAt       DateTime        @updatedAt
  location       String
  description    String
  avaibleSeat    Int
  banner         String
  category       String
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
  ticket_type    TypeTicket[]
  event_category EventCategory[]
}

model TypeTicket {
  id         Int    @id @default(autoincrement())
  ticketName String
  price      Int
  eventId    Int
  event      Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventCategory {
  id              Int   @id @default(autoincrement())
  type_categoryId Int
  eventId         Int
  event           Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
