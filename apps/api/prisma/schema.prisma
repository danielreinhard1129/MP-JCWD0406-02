// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  password        String
  email           String         @unique
  isActive        Boolean        @default(true)
  profile_picture String?
  contact         Int?
  address         String?
  referral_number String         @unique
  updatedAt        DateTime       @default(now())
  createdAt       DateTime       @updatedAt
  roleId          Int
  role            Role           @relation(fields: [roleId], references: [id])
  point_balance   PointBalance[]
  userReward      UserReward[]
  userVoucher     UserVoucher[]
  event           Event[]
  review          Review[]
  transaction     Transaction[]
}

model Role {
  id   Int    @id @default(autoincrement())
  role String
  user User[]
}

model PointBalance {
  id            Int      @id @default(autoincrement())
  point_balance Int      @default(0)
  userId        Int
  expiresAt     DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model UserReward {
  id        Int      @id @default(autoincrement())
  userId    Int
  rewardId  Int
  expiresAt DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward    Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
}

model Reward {
  id         Int          @id @default(autoincrement())
  nameReward String
  persentase Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userReward UserReward[]
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUse     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucher   Voucher  @relation(fields: [voucherId], references: [id], onDelete: Cascade)
}

model Voucher {
  id          Int           @id @default(autoincrement())
  nameVoucher String
  persentase  Int
  expiresAt   DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userVoucher UserVoucher[]
}

model Event {
  id             Int              @id @default(autoincrement())
  title          String           @unique
  description    String
  locationId     Int
  startDate      DateTime
  endDate        DateTime
  price          Int
  limit          Int
  booked         Int
  thumbnail      String
  userId         Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  location       Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)
  diskon         Diskon[]
  event_category Event_category[]
  review         Review[]
  transaction    Transaction[]
}

model Location {
  id        Int      @id @unique
  city      String
  country   String
  createdAt DateTime
  event     Event[]
}

model Diskon {
  id         Int      @id @default(autoincrement())
  percentage Int
  startDate  DateTime
  endDate    DateTime
  eventId    Int
  isActive   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id])
}

model Event_category {
  id         Int      @id @default(autoincrement())
  categoryId Int
  eventId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  isDeleted      Boolean
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  event_category Event_category[]
}

model Review {
  id       Int      @id @default(autoincrement())
  rating   Int
  review   String
  eventId  Int
  userId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event    Event    @relation(fields: [eventId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique
  userId       Int
  eventId      Int
  statusId     Int
  qty          Int
  paymentProof String
  total        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  event        Event    @relation(fields: [eventId], references: [id])
  status       Status   @relation(fields: [statusId], references: [id])
}

model Status {
  id          Int           @id @default(autoincrement())
  title       String
  createdAt    DateTime      @default(now())
  transaction Transaction[]
}